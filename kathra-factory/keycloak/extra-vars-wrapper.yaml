keycloak:
  username: ${KEYCLOAK_ADMIN_LOGIN}
  password: ${KEYCLOAK_ADMIN_PASSWORD}
  
  image:
    tag: 4.2.1.Final

  extraEnv: |
    - name: KEYCLOAK_LOGLEVEL
      value: INFO
    - name: WILDFLY_LOGLEVEL
      value: INFO
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: LDAP_SERVICE_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: {{ template "configuration.ldapPasswordService" . }}

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: traefik
      cert-manager.io/issuer: letsencrypt-prod
    hosts:
      - keycloak.${BASE_DOMAIN}
    tls:
    - hosts:
      - keycloak.${BASE_DOMAIN}
      secretName: keycloak

  persistence:
    dbVendor: postgres
    existingSecret: "keycloak-postgres-kubedb-auth"
    existingSecretKey: POSTGRES_PASSWORD
    dbName: postgres
    dbHost: keycloak-postgres-kubedb
    dbUser: postgres
configuration:
  realm: kathra
  ingress:
    labels:
      ingress: tls
  clientsDomain: ${BASE_DOMAIN}
  configurationShellScript: "keycloak-configuration.sh"
  configurationConfigmap: keycloak-configuration
  ldapEnabled: ${LDAP_ENABLED}
  ldapDomain: ${LDAP_DOMAIN}
  ldapPasswordService: ldap-service-password
  ldapPassword: ${LDAP_PWD}
  ldapUserDn : ${LDAP_USER_DN}
  ldapServiceAccount: ${LDAP_SA}
  ldapGroupMapper:
    groupsDn: ${LDAP_DN}
    groupNameLdapAttribute: cn
    groupObjectClass: group
    preserveGroupInheritance: false
    membershipLdapAttribute: member
    membershipAttributeType: DN
    groupsLdapFilter: ""
    mappingMode: READ_ONLY
    userRolesRetrieveStrategy: LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY
    mappedGroupsAttributes: ""
    dropNonExistingGroupsDuringSync: false
