

variable "domain" {
    default = "kathra.boubechtoula.ovh"
}
variable "tls_cert_filepath" {
    default = "cert.pem"
}
variable "tls_key_filepath" {
    default = "key.pem"
}

variable "cpus" {
    default = 4
}
variable "memory" {
    default = 16384
}
variable "disk" {
    default = "50000mb"
}
variable "kubernetes_version" {
    default = "1.15.1"
}

variable "namespaces_with_tls" {
    default = ["factory","kathra"]
}



resource "null_resource" "install_minikube" {
    triggers = {
        timestamp        = timestamp()
    }
    provisioner "local-exec" {
        command = <<EOT
            . ${path.module}/sh/functions.sh
            sudo -s
            generateCertsDnsChallenge $domain                     || exit 1
            startMinikube                                         || exit 1
            kubectl get nodes                                     || exit 1
            addLocalIpInCoreDNS $domain                           || exit 1
            getKubeConfig > /tmp/kathra_minikube_kubeconfig
            exit
        EOT
        interpreter = ["bash", "-c"]
        environment = {
            domain                  = var.domain
            minikubeCpus            = var.cpus
            minikubeMemory          = var.memory
            minikubeDiskSize        = var.disk
            kubernetesVersion       = var.kubernetes_version
            minikubeVmDriver        = "virtualbox"
            debug                   = 1
        }
    }
}

data "external" "minikube_kubeconfig" {
    program = ["bash", "-c", "${path.module}/sh/functions.sh ; getKubeConfig"]
    depends_on = [null_resource.install_minikube]
}
resource "local_file" "minikube_kubeconfig" {
    content  = jsonencode(data.external.minikube_kubeconfig.result)
    filename = "/tmp/kathra_minikube_kubeconfig"
}


module "kubernetes_addons" {
    source            = "./addons"
    kube_config       = jsondecode(local_file.minikube_kubeconfig.content)
    default_tls_cert  = file(var.tls_cert_filepath)
    default_tls_key   = file(var.tls_key_filepath)
}


resource "null_resource" "forward_port" {
    triggers = {
        timestamp        = timestamp()
    }
    provisioner "local-exec" {
        command = <<EOT
            . ${path.module}/sh/functions.sh
            sudo -s
            forwardPort "80" "$(minikube ip)" "$nodePortHTTP"   || exit 1
            forwardPort "443" "$(minikube ip)" "$nodePortHTTPS" || exit 1
            exit 
        EOT
        interpreter = ["bash", "-c"]
        environment = {
            domain                  = var.domain
            nodePortHTTP            = module.kubernetes_addons.treafik.http_node_port
            nodePortHTTPS           = module.kubernetes_addons.treafik.https_node_port
            debug                   = 1
        }
    }
    depends_on = [null_resource.install_minikube]
}

module "namespace_factory_with_tls" {
    source            = "./namespace_with_tls"
    namespace         = "factory"
    default_tls_cert  = file(var.tls_cert_filepath)
    default_tls_key   = file(var.tls_key_filepath)
}

module "namespace_kathra_with_tls" {
    source            = "./namespace_with_tls"
    namespace         = "kathra"
    default_tls_cert  = file(var.tls_cert_filepath)
    default_tls_key   = file(var.tls_key_filepath)
}

output "kube_config" {
    value = jsondecode(local_file.minikube_kubeconfig.content)
}